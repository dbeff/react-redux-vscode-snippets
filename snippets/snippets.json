{
    "constructor": {
        "prefix": "constructor",
        "body": "constructor(props){\n\tsuper(props);\n\tthis.state = {};\n}",
        "description": "fn()"
    },
    "state": {
        "prefix": "state",
        "body": "this.state.${1:key}",
        "description": "Object"
    },
    "setState": {
        "prefix": "setState",
        "body": "this.setState({${1:key},${2:value}})",
        "description": "fn({})"
    },
    "props": {
        "prefix": "props",
        "body": "this.props.${1:key}",
        "description": "Object"
    },
    "render": {
        "prefix": "render",
        "body": "${1:render}(){\n\treturn(\n\t\t${2}\n\t);\n}",
        "description": "fn()"
    },
    "componentDidMount": {
        "prefix": "componentDidMount",
        "body": "componentDidMount() {\n\t${1}\n}",
        "description": "fn()"
    },
    "componentDidUpdate": {
        "prefix": "componentDidUpdate",
        "body": "componentDidUpdate(prevProps, prevState) {\n\t${1}\n}",
        "description": "fn(pp,ps)"
    },
    "componentWillMount": {
        "prefix": "componentWillMount",
        "body": "componentWillMount() {\n\t${1}\n}",
        "description": "fn()"
    },
    "componentWillUnmount": {
        "prefix": "componentWillUnmount",
        "body": "componentWillUnmount() {\n\t${1}\n}",
        "description": "fn()"
    },
    "componentWillReceiveProps": {
        "prefix": "componentWillReceiveProps",
        "body": "componentWillReceiveProps(nextProps) {\n\t${1}\n}",
        "description": "fn(np)"
    },
    "componentWillUpdate": {
        "prefix": "componentWillUpdate",
        "body": "componentWillUpdate(nextProps, nextState) {\n\t${1}\n}",
        "description": "fn(np, ns)"
    },
    "shouldComponentUpdate": {
        "prefix": "shouldComponentUpdate",
        "body": "shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}",
        "description": "fn(np,ns)"
    },
    "forceUpdate": {
        "prefix": "forceUpdate",
        "body": "forceUpdate()",
        "description": "fn()"
    },
    "propTypes": {
        "prefix": "propTypes",
        "body": "${1:Class}.propTypes {\n\t${2:key}\n}",
        "description": "Object"
    },
    "defaultProps": {
        "prefix": "defaultProps",
        "body": "${1:Class}.defaultProps {\n\t${2:key}\n}",
        "description": "Object"
    },
    "mapStateToProps": {
        "prefix": "mapStateToProps",
        "body": "function mapStateToProps({${1:reducer}}) {\n\treturn{${1:reducer}}\n}",
        "description": "fn()"
    },
    "mapDispatchToProps": {
        "prefix": "mapDispatchToProps",
        "body": "function mapDispatchToProps(dispatch) {\n\treturn bindActionCreators({${1:reducer}},dispatch)\n}",
        "description": "fn()"
    },
    "connect": {
        "prefix": "connect",
        "body": "export default connect(mapStateToProps, mapDispatchToProps)(${1:Class})",
        "description": "fn()"
    },
    "action": {
        "prefix": "action",
        "body": "export function ${1:name}(){\n\treturn{type:${2:ACTION_NAME},payload:${3:payload}}\n}",
        "description": "fn()"
    },
    "container": {
        "prefix": "container",
        "body": "import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nclass ${1:Class} extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"${2:class-name}\">\n                ${3:content}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps({}){\n    return {};\n}\n\nfunction mapDispatchToProps(dispatch){\n    return bindActionCreators({},dispatch);\n}\n\nexport default connect (mapStateToProps,mapDispatchToProps)(${1:Class});\n",
        "description": "React container"
    },
    "component": {
        "prefix": "component",
        "body": "import React,{Component} from 'react';\n\nexport default class ${1:Class} extends Component {\n\n    render() {\n        return (\n            <div className=\"${2:class-name}\">\n                ${3:content}\n            </div>\n        );\n    }\n}",
        "description": "React component"
    },
    "reducer": {
        "prefix": "reducer",
        "body": "import {${1:ACTION}} from '../actions/index';\n\nconst initialState = ${2:initialState}\n\nexport default function(state = initialState,action) {\n    switch (action.type){\n        case ${3:ACTION}:\n            return ${4:action.payload}\n    }\n    return state;\n}\n",
        "description": "React component"
    }
}